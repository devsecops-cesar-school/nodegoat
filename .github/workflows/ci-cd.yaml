name: ci-cd

on: [pull_request]

jobs:


#########################################################################
##                                  CI
#########################################################################

  sast-sonarqube:
    name: SAST - Sonarqube
    runs-on: [arc-runner-set]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://sonarqube-sonarqube.sonarqube:9000
          SONAR_PROJECT_KEY: app
        run: |
          docker run \
            --network host \
            --platform linux/amd64 \
            --rm \
            -e SONAR_HOST_URL="${SONAR_HOST_URL}" \
            -e SONAR_TOKEN="${SONAR_TOKEN}" \
            -v "$(pwd):/usr/src" \
            sonarsource/sonar-scanner-cli \
              -Dsonar.projectKey=app \
              -Dsonar.projectName="DevSecOps App" \
              -Dsonar.sources=${SONAR_PROJECT_KEY}

          sleep 10
          STATUS=$(curl -s -u ${SONAR_TOKEN}: -G --data-urlencode --data-urlencode \
            "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}" \
            | jq -r '.projectStatus.status')

          if [ "$STATUS" != "OK" ]; then
            echo "❌ Quality Gate failed with status: $STATUS"
            exit 1
          else
            echo "✅ Quality Gate passed"
          fi

  dependency-check:
    name: SCA - Syft, Dependency Track
    runs-on: [arc-runner-set]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: anchore/sbom-action@v0
        name: Generate SBOM File with Syft
        with:
          artifact-name: sbom-cyclonedx.json
          format: cyclonedx-json
          upload-artifact: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: "${{ github.workspace }}/sbom-cyclonedx.json"

      # - name: Upload SBOM to Dependency Track
      #   run: |
      #     curl -i -X POST "http://dependencytrack-dependency-track-api-server.dependencytrack:8080/api/v1/bom" \
      #       -H 'Content-Type: multipart/form-data' \
      #       -H "X-Api-Key: ${{ secrets.DEPENDENCYTRACK_APIKEY }}" \
      #       -H "Content-Type: application/json" \
      #       -F "projectName=app" \
      #       -F "autoCreate=true" \
      #       -F "projectVersion=main" \
      #       -F "bom=@${{ github.workspace }}/sbom-cyclonedx.json"

      - uses: DependencyTrack/gh-upload-sbom@v3
        name: Upload SBOM to Dependency Track
        if: always()
        with:
          serverHostname: 'dependencytrack-dependency-track-api-server.dependencytrack'
          port: '8080'
          protocol: 'http'
          apiKey: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
          projectName: 'app'
          projectVersion: 'main'
          bomFilename: "${{ github.workspace }}/sbom-cyclonedx.json"
          autoCreate: true


  iac-scanning:
    name: IaC Scanning - checkov, archerysec, trivy
    runs-on: [arc-runner-set]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect IaC issues with Trivy
        uses: aquasecurity/trivy-action@master
        with:
            scan-type: fs
            scan-ref: .
            hide-progress: true
            format: json
            output: trivy.json
            exit-code: 0
            scanners: vuln,misconfig,secret,license

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' 

      - name: Upload Results to ArcherySec
        run: |
          pip install archerysec-cli setuptools

          PROJECT_ID=$(archerysec-cli -h http://archerysec-app.archerysec \
                        -t "${{ secrets.ARCHERYSEC_APIKEY }}" \
                        --createproject \
                        --project_name="app" \
                        --project_disc="app project" \
                        |grep project_id \
                        |jq -r '.project_id')

          archerysec-cli -h http://archerysec-app.archerysec \
            -t "${{ secrets.ARCHERYSEC_APIKEY }}" \
            --project="${PROJECT_ID}" \
            --scanner=trivy \
            --target=main \
            --upload \
            --file-type=JSON \
            -p trivy.json

      - name: Run Checkov for IaC Scanning
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform,kubernetes,dockerfile
          output_format: cli,sarif
          output_file_path: console,iac-scanning-results.sarif

      # Requires Github Advanced Security
      - name: Upload Checkov Results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: iac-scanning-results.sarif

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: iac-scanning-results.sarif
          path: iac-scanning-results.sarif


