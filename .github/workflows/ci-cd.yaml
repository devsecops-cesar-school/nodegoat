name: ci-cd

on: [pull_request]

jobs:

#########################################################################
##                                  CI
#########################################################################

  trufflehog-secrets-scanning:
    name: Secret Scanning - TruffleHog
    runs-on: [arc-runner-set]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --results=verified,unknown,unverified

  trivy-secrets-scanning:
    name: Secret Scanning - Trivy
    runs-on: [arc-runner-set]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        # with:
        #   fetch-depth: 0
        
      - name: Detect Secrets with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          hide-progress: true
          format: table
          output: trivy.txt
          exit-code: 1
          scanners: secret
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL

      - name: Publish Trivy Secrets Results
        if: always()
        run: |
          if [[ -s trivy.txt ]]; then
            {
              echo "### Security Output"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```terraform'
              cat trivy.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi

  dependency-check:
    name: SCA - Syft, Dependency Track
    runs-on: [arc-runner-set]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: anchore/sbom-action@v0
        name: Generate SBOM File with Syft
        with:
          artifact-name: sbom-cyclonedx.json
          format: cyclonedx-json
          upload-artifact: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: "${{ github.workspace }}/sbom-cyclonedx.json"

      # - name: Upload SBOM to Dependency Track
      #   run: |
      #     curl -i -X POST "http://dependencytrack-dependency-track-api-server.dependencytrack:8080/api/v1/bom" \
      #       -H 'Content-Type: multipart/form-data' \
      #       -H "X-Api-Key: ${{ secrets.DEPENDENCYTRACK_APIKEY }}" \
      #       -H "Content-Type: application/json" \
      #       -F "projectName=app" \
      #       -F "autoCreate=true" \
      #       -F "projectVersion=main" \
      #       -F "bom=@${{ github.workspace }}/sbom-cyclonedx.json"

      - uses: DependencyTrack/gh-upload-sbom@v3
        name: Upload SBOM to Dependency Track
        if: always()
        with:
          serverHostname: 'dependencytrack-dependency-track-api-server.dependencytrack'
          port: '8080'
          protocol: 'http'
          apiKey: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
          projectName: 'app'
          projectVersion: ${{ github.head_ref }} 
          bomFilename: "${{ github.workspace }}/sbom-cyclonedx.json"
          autoCreate: true

  sast-sonarqube:
    name: SAST - Sonarqube
    runs-on: [arc-runner-set]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://sonarqube-sonarqube.sonarqube:9000
          SONAR_PROJECT_KEY: app
        run: |
          docker run \
            --network host \
            --platform linux/amd64 \
            --rm \
            -e SONAR_HOST_URL="${SONAR_HOST_URL}" \
            -e SONAR_TOKEN="${SONAR_TOKEN}" \
            -v "$(pwd):/usr/src" \
            sonarsource/sonar-scanner-cli \
              -Dsonar.projectKey=app \
              -Dsonar.projectName="DevSecOps App" \
              -Dsonar.sources=${SONAR_PROJECT_KEY}

          sleep 10
          STATUS=$(curl -s -u ${SONAR_TOKEN}: -G --data-urlencode --data-urlencode \
            "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}" \
            | jq -r '.projectStatus.status')

          if [ "${STATUS}" != "OK" ]; then
            echo "❌ Quality Gate failed with status: ${STATUS}"
            exit 1
          else
            echo "✅ Quality Gate passed"
          fi

  iac-scanning:
    name: IaC Scanning - checkov, archerysec, trivy
    runs-on: [arc-runner-set]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect IaC issues with Trivy
        uses: aquasecurity/trivy-action@master
        with:
            scan-type: fs
            scan-ref: .
            hide-progress: true
            format: json
            output: trivy.json
            exit-code: 0
            scanners: vuln,misconfig,secret,license

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' 

      - name: Upload Results to ArcherySec
        run: |
          pip install archerysec-cli setuptools

          PROJECT_ID=$(archerysec-cli -h http://archerysec-app.archerysec \
                        -t "${{ secrets.ARCHERYSEC_APIKEY }}" \
                        --createproject \
                        --project_name="app" \
                        --project_disc="app project" \
                        |grep project_id \
                        |jq -r '.project_id')

          archerysec-cli -h http://archerysec-app.archerysec \
            -t "${{ secrets.ARCHERYSEC_APIKEY }}" \
            --project="${PROJECT_ID}" \
            --scanner=trivy \
            --target=main \
            --upload \
            --file-type=JSON \
            -p trivy.json

      - name: Run Checkov for IaC Scanning
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform,kubernetes,dockerfile
          output_format: cli,sarif
          output_file_path: console,iac-scanning-results.sarif

      ## Requires Github Advanced Security
      # - name: Upload Checkov Results
      #   if: always()
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: iac-scanning-results.sarif

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: iac-scanning-results.sarif
          path: iac-scanning-results.sarif

  build:
    name: Building Image
    runs-on: [arc-runner-set]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devsecops-nodegoat:latest
          platforms: linux/amd64,linux/arm64

  sca-image-scanning:
    name: Container Scanning - Trivy
    runs-on: [arc-runner-set]
    needs: build
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker pull
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/devsecops-nodegoat:latest

      - name: Run Trivy Vulnerability Scanner to Generate Table Output
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/devsecops-nodegoat:latest
          scan-type: image
          hide-progress: true
          format: table
          output: trivy.txt
          exit-code: 1
          # ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
          scanners: vuln

      - name: Publish Trivy Output to Summary
        if: always()
        run: |
          if [[ -s trivy.txt ]]; then
            {
              echo "### Security Output"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```terraform'
              cat trivy.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi

  license-scanning:
    name: License Scanning - Trivy
    runs-on: [arc-runner-set]
    needs: build
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker pull
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/devsecops-nodegoat:latest

      - name: Run Trivy Vulnerability Scanner to Generate Table Output
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/devsecops-nodegoat:latest
          scan-type: image
          hide-progress: true
          format: table
          output: trivy.txt
          exit-code: 1
          vuln-type: os,library
          severity: UNKNOWN,CRITICAL,HIGH
          scanners: license

      - name: Publish Trivy Output to Summary
        if: always()
        run: |
          if [[ -s trivy.txt ]]; then
            {
              echo "### Security Output"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```terraform'
              cat trivy.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi

#########################################################################
##                                  CD
#########################################################################

  deploy-staging:
    name: DEPLOY - staging
    runs-on: [arc-runner-set]
    needs:
      - build
    steps:
      - name: Repo Checkout
        uses: actions/checkout@v4

      - name: Download Kubernetes CLI Tools
        uses: alexellis/arkade-get@master
        with:
          kubectl: latest

      # kind get kubeconfig --name devsecops
      # change kubeconfig api server to https://kubernetes.default:443, convert the file to base64 and add to github secrets (secrets.KUBECONFIG)
      - name: Configure access to Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV

      - name: Deploy Nodegoat
        run: |
          NAMESPACE="nodegoat"
          kubectl create ns ${NAMESPACE} || true
          kubectl apply -n ${NAMESPACE} -f k8s/nodegoat/

  dast-owasp-zap-scanning:
    name: DAST - OWASP zap
    runs-on: [arc-runner-set]
    needs: deploy-staging
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: ZAP Scan
        # uses: zaproxy/action-full-scan@v0.12.0 # for full scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://nodegoat-web.nodegoat'
          cmd_options: '-n owasp-zap.context -U admin -l WARN'
          fail_action: 'true'
          allow_issue_writing: 'false'
          artifact_name: 'zap_scan'

  infra-scanning:
    name: Infrastructure Scanning - Trivy
    runs-on: [arc-runner-set]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure access to Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sudo sh -s -- -b /usr/local/bin
    
      - name: Scan Kubernetes cluster (summary)
        run: |
          trivy k8s \
            --report summary \
            --severity HIGH,CRITICAL \
            --format table \
            --output trivy-k8s-summary.txt \
            kind-devsecops

      - name: Generate detailed JSON report
        run: |
          trivy k8s \
            --report all \
            --severity HIGH,CRITICAL \
            --format json \
            --output trivy-k8s-report.json \
            --exit-code 1 \
            kind-devsecops

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-k8s-report
          path: trivy-k8s-report.json

      - name: Publish Trivy Output to Summary
        if: always()
        run: |
          if [[ -s trivy-k8s-summary.txt ]]; then
            {
              echo "### Security Output"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```terraform'
              cat trivy-k8s-summary.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi
