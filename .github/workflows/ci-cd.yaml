name: ci-cd

on: [pull_request]

jobs:

#########################################################################
##                                  CI
#########################################################################

  trufflehog-secrets-scanning:
    name: Secret Scanning - TruffleHog
    runs-on: [arc-runner-set]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --results=verified,unknown,unverified

  trivy-secrets-scanning:
    name: Secret Scanning - Trivy
    runs-on: [arc-runner-set]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        # with:
        #   fetch-depth: 0
        
      - name: Detect Secrets with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          hide-progress: true
          format: table
          output: trivy.txt
          exit-code: 1
          scanners: secret
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL

      - name: Publish Trivy Secrets Results
        if: always()
        run: |
          if [[ -s trivy.txt ]]; then
            {
              echo "### Security Output"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```terraform'
              cat trivy.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi

  dependency-check:
    name: SCA - Syft, Dependency Track
    runs-on: [arc-runner-set]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: anchore/sbom-action@v0
        name: Generate SBOM File with Syft
        with:
          artifact-name: sbom-cyclonedx.json
          format: cyclonedx-json
          upload-artifact: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: "${{ github.workspace }}/sbom-cyclonedx.json"

      # - name: Upload SBOM to Dependency Track
      #   run: |
      #     curl -i -X POST "http://dependencytrack-dependency-track-api-server.dependencytrack:8080/api/v1/bom" \
      #       -H 'Content-Type: multipart/form-data' \
      #       -H "X-Api-Key: ${{ secrets.DEPENDENCYTRACK_APIKEY }}" \
      #       -H "Content-Type: application/json" \
      #       -F "projectName=app" \
      #       -F "autoCreate=true" \
      #       -F "projectVersion=main" \
      #       -F "bom=@${{ github.workspace }}/sbom-cyclonedx.json"

      - uses: DependencyTrack/gh-upload-sbom@v3
        name: Upload SBOM to Dependency Track
        if: always()
        with:
          serverHostname: 'dependencytrack-dependency-track-api-server.dependencytrack'
          port: '8080'
          protocol: 'http'
          apiKey: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
          projectName: 'app'
          projectVersion: ${{ github.head_ref }} 
          bomFilename: "${{ github.workspace }}/sbom-cyclonedx.json"
          autoCreate: true

  sast-sonarqube:
    name: SAST - Sonarqube
    runs-on: [arc-runner-set]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://sonarqube-sonarqube.sonarqube:9000
          SONAR_PROJECT_KEY: app
        run: |
          docker run \
            --network host \
            --platform linux/amd64 \
            --rm \
            -e SONAR_HOST_URL="${SONAR_HOST_URL}" \
            -e SONAR_TOKEN="${SONAR_TOKEN}" \
            -v "$(pwd):/usr/src" \
            sonarsource/sonar-scanner-cli \
              -Dsonar.projectKey=app \
              -Dsonar.projectName="DevSecOps App" \
              -Dsonar.sources=${SONAR_PROJECT_KEY}

          sleep 10
          STATUS=$(curl -s -u ${SONAR_TOKEN}: -G --data-urlencode --data-urlencode \
            "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}" \
            | jq -r '.projectStatus.status')

          if [ "${STATUS}" != "OK" ]; then
            echo "❌ Quality Gate failed with status: ${STATUS}"
            exit 1
          else
            echo "✅ Quality Gate passed"
          fi

